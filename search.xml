<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Theorem Proving &amp; Program Verification by Coq</title>
      <link href="/2023/03/06/algorithm/Theorem-Proving-and-Program-Verification-By-Coq/"/>
      <url>/2023/03/06/algorithm/Theorem-Proving-and-Program-Verification-By-Coq/</url>
      
        <content type="html"><![CDATA[<h1 id="content"><a class="markdownIt-Anchor" href="#content"></a> Content</h1><ul><li><a href="#content">Content</a></li><li><a href="#introduction">Introduction</a></li><li><a href="#1-proof-equation">1. Proof Equation</a></li></ul><h1 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h1><blockquote><p>If we say that programming is through writing code, the combination of simple functions &amp; components to realize the complex assembly, then proof is the combination of some simple proof steps to make the complex proof.<br />Theorem proving tools like Coq &amp; Isabelle allow us to describe mathematical definitions &amp; mathematical proofs in the form of codes.</p></blockquote><p>We use Coq here: <a href="https://github.com/coq/platform/releases/">Coq-Release@github.com</a>.</p><h1 id="1-proof-equation"><a class="markdownIt-Anchor" href="#1-proof-equation"></a> 1. Proof Equation</h1><p>Equation is one of the base of math, we started with a proof about group theory.</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Module</span> Group.</span><br><span class="line"><span class="keyword">Class</span> GroupOperator: <span class="keyword">Type</span> := &#123;</span><br><span class="line">    tote_set: <span class="keyword">Type</span>;</span><br><span class="line">    zero: tote_set;</span><br><span class="line">    add: tote_set -&gt; tote_set -&gt; tote_set;</span><br><span class="line">    neg: tote_set -&gt; tote_set;</span><br><span class="line">&#125;.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Notation</span> <span class="string">&quot;0&quot;</span> := (zero).</span><br><span class="line"><span class="keyword">Notation</span> <span class="string">&quot;a + b&quot;</span> := (add a b).</span><br><span class="line"><span class="keyword">Notation</span> <span class="string">&quot;- a&quot;</span> := (neg a).</span><br><span class="line"></span><br><span class="line"><span class="keyword">Check</span> <span class="keyword">forall</span> (G: GroupOperator) (x y: tote_set), x + y = y + x.</span><br></pre></td></tr></table></figure><p>First, we have to define which operations a group contains.<br />We can write without these coq-reserve words such as <em>Type or Class</em> here. To define a group operation, you can define the set <em>tote_set</em> first, &amp; then it should contain the unit element <em>zero</em>, the binary operation <em>add</em> &amp; an inverse operation <em>neg</em>.</p><p>The key word <em>Notation</em> in coq helps describe the related properties by using refiner words.</p><p>At the lastest line, the order <em>Check</em> can be understood as asking computer to check if the expression is syntactically legal. The point is that it just does in syntax but not about the proof.</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span> GroupProperties (G: GroupOperator): <span class="keyword">Prop</span> := &#123;</span><br><span class="line">    associate: <span class="keyword">forall</span> (a b c: tote_set), (a + b) + c = a + (b + c);</span><br><span class="line">    left_unit_clear: <span class="keyword">forall</span> (a: tote_set), <span class="number">0</span> + a = a;</span><br><span class="line">    left_inverstion_clear: <span class="keyword">forall</span> (a: tote_set), (- a) + a = <span class="number">0</span>;</span><br><span class="line">&#125;.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Theorem</span> right_inverstion_clear &#123;G: GroupOperator&#125; &#123;GP: GroupProperties G&#125;: </span><br><span class="line">(<span class="keyword">forall</span> (a: tote_set), a + (- a) = <span class="number">0</span>).</span><br></pre></td></tr></table></figure><p>We list 3 laws of the group, clearing left unit, clearing inverstion &amp; associative law.</p><p>The things after <em>Theorem</em> here needed to proof by us, Try to do!</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Require</span> <span class="keyword">Import</span> <span class="keyword">Setoid</span>.</span><br><span class="line"><span class="keyword">Proof</span>.</span><br><span class="line">  <span class="built_in">intros</span> a.</span><br><span class="line">  <span class="built_in">rewrite</span> &lt;- (left_unit_clear (a + (- a))).</span><br><span class="line">  <span class="built_in">rewrite</span> &lt;- (left_inverstion_clear (- a)) <span class="built_in">at</span> <span class="number">1.</span></span><br><span class="line">  <span class="built_in">rewrite</span> associate.</span><br><span class="line">  <span class="built_in">rewrite</span> &lt;- (associate (- a)).</span><br><span class="line">  <span class="built_in">rewrite</span> left_inverstion_clear.</span><br><span class="line">  <span class="built_in">rewrite</span> left_unit_clear.</span><br><span class="line">  <span class="built_in">rewrite</span> left_inverstion_clear.</span><br><span class="line">  <span class="built_in">reflexivity</span>.</span><br><span class="line"><span class="keyword">Qed</span>.</span><br></pre></td></tr></table></figure><p>Here is the classical proof in group theory, thatâ€™s derived from the two properties of left unit element &amp; left inverse element, to right inverse element.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Welcome, guest.</title>
      <link href="/2023/03/05/hi-guest/"/>
      <url>/2023/03/05/hi-guest/</url>
      
        <content type="html"><![CDATA[<h2 id="hi"><a class="markdownIt-Anchor" href="#hi"></a> Hi!</h2><p>Welcome to my blog website<br /><a href="../../../../about">About this website.</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
