<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Theorem Proving &amp; Program Verification by Coq</title>
      <link href="/2023/03/06/algorithm/Theorem-Proving-and-Program-Verification-By-Coq/"/>
      <url>/2023/03/06/algorithm/Theorem-Proving-and-Program-Verification-By-Coq/</url>
      
        <content type="html"><![CDATA[<blockquote><p>If we say that programming is through writing code, the combination of simple functions &amp; components to realize the complex assembly, then proof is the combination of some simple proof steps to make the complex proof.<br />Theorem proving tools like Coq &amp; Isabelle allow us to describe mathematical definitions &amp; mathematical proofs in the form of codes.</p></blockquote><p>We use Coq here: <a href="https://github.com/coq/platform/releases/">Coq-Release@github.com</a>.</p><h1 id="1-proof-equation"><a class="markdownIt-Anchor" href="#1-proof-equation"></a> 1  Proof Equation</h1><p>Equation is one of the base of math, we started with a proof about group theory.</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Module</span> Group.</span><br><span class="line"><span class="keyword">Class</span> GroupOperator: <span class="keyword">Type</span> := &#123;</span><br><span class="line">    carrier_set: <span class="keyword">Type</span>;</span><br><span class="line">    zero: carrier_set;</span><br><span class="line">    add: carrier_set -&gt; carrier_set -&gt; carrier_set;</span><br><span class="line">    neg: carrier_set -&gt; carrier_set;</span><br><span class="line">&#125;.</span><br></pre></td></tr></table></figure><p>First, we have to define which operations a group contains.<br />We can write without these coq-reserve words such as <em>Type or Class</em> here. To define a group operation, you can define the set <em>carrier_set</em> first, &amp; then it should contain the unit element <em>zero</em>, the binary operation <em>add</em> &amp; an inverse operation <em>neg</em>.</p><p>test</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Welcome, guest.</title>
      <link href="/2023/03/05/hi-guest/"/>
      <url>/2023/03/05/hi-guest/</url>
      
        <content type="html"><![CDATA[<h2 id="hi"><a class="markdownIt-Anchor" href="#hi"></a> Hi!</h2><p>Welcome to my blog website<br /><a href="../../../../about">About this website.</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
